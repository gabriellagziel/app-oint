import "package:cloud_firestore/cloud_firestore.dart"; import "package:firebase_auth/firebase_auth.dart"; import "package:flutter/material.dart"; import "package:url_launcher/url_launcher.dart"; class InviteService { final FirebaseFirestore _firestore; final FirebaseAuth _auth; InviteService({FirebaseFirestore? firestore, FirebaseAuth? auth}) : _firestore = firestore ?? FirebaseFirestore.instance, _auth = auth ?? FirebaseAuth.instance; Future<void> sendInvites({required String meetingId, required List<String> inviteePhones, required BuildContext context}) async { final currentUser = _auth.currentUser; if (currentUser == null) throw Exception("User not authenticated"); for (final phone in inviteePhones) { final userQuery = await _firestore.collection("users").where("phone", isEqualTo: phone).limit(1).get(); if (userQuery.docs.isNotEmpty) { final targetUid = userQuery.docs.first.id; await _firestore.collection("invites").add({"meetingId": meetingId, "fromUid": currentUser.uid, "toUid": targetUid, "status": "pending", "timestamp": FieldValue.serverTimestamp(), "phone": phone}); print("âœ… Internal invite sent to $targetUid"); } else { final link = "https://app-oint.com/invite?meeting=$meetingId"; _showExternalInviteOptions(context, phone, link); } } } Future<void> updateInviteStatus({required String inviteId, required String status}) async { final currentUser = _auth.currentUser; if (currentUser == null) throw Exception("User not authenticated"); await _firestore.collection("invites").doc(inviteId).update({"status": status, "updatedAt": FieldValue.serverTimestamp()}); } Stream<QuerySnapshot> getPendingInvites() { final currentUser = _auth.currentUser; if (currentUser == null) throw Exception("User not authenticated"); return _firestore.collection("invites").where("toUid", isEqualTo: currentUser.uid).where("status", isEqualTo: "pending").orderBy("timestamp", descending: true).snapshots(); } void _showExternalInviteOptions(BuildContext context, String phone, String link) { showModalBottomSheet(context: context, builder: (_) => Column(mainAxisSize: MainAxisSize.min, children: [ListTile(leading: const Icon(Icons.chat), title: const Text("Send via WhatsApp"), onTap: () => launchUrl(Uri.parse("https://wa.me/$phone?text=Join%20my%20meeting:%20$link"))), ListTile(leading: const Icon(Icons.sms), title: const Text("Send via SMS"), onTap: () => launchUrl(Uri.parse("sms:$phone?body=Join%20my%20meeting:%20$link"))), ListTile(leading: const Icon(Icons.email), title: const Text("Send via Email"), onTap: () => launchUrl(Uri.parse("mailto:?subject=Meeting%20Invite&body=$link")))])); } }
